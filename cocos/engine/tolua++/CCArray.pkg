class CCArray : public CCObject, public CCClonable
{
    static Array* create();
    static Array* createWithObject(CCObject* object);
    static Array* createWithCapacity(long capacity);
    static Array* createWithArray(CCArray* otherArray);
    static Array* createWithContentsOfFile(const char* pFileName);
    static Array* createWithContentsOfFileThreadSafe(const char* pFileName);
    Array();
    ~Array();
    bool init();
    bool initWithObject(CCObject* object);
    bool initWithCapacity(long capacity);
    bool initWithArray(CCArray* otherArray);
    long count() const;
    long capacity() const;
    long getIndexOfObject(CCObject* object) const;
    CCObject* getObjectAtIndex(long index);
    CCObject* getLastObject();
    CCObject* getRandomObject();
    bool containsObject(CCObject* object) const;
    bool isEqualToArray(CCArray* otherArray);
    void addObject(CCObject* object);
    void addObjectsFromArray(CCArray* otherArray);
    void insertObject(CCObject* object, long index);
    void setObject(CCObject* object, long index);
    void fastSetObject(CCObject* object, long index);
    void swap( long indexOne, long indexTwo );
    void removeLastObject(bool releaseObj = true);
    void removeObject(CCObject* object, bool releaseObj = true);
    void removeObjectAtIndex(long index, bool releaseObj = true);
    void removeObjectsInArray(CCArray* otherArray);
    void removeAllObjects();
    void fastRemoveObject(CCObject* object);
    void fastRemoveObjectAtIndex(long index);
    void exchangeObject(CCObject* object1, CCObject* object2);
    void exchangeObjectAtIndex(long index1, long index2);
    void replaceObjectAtIndex(long index, CCObject* object, bool releaseObject = true);
    void reverseObjects();
    void reduceMemoryFootprint();
    virtual void acceptVisitor(DataVisitor &visitor);
    virtual CCArray* clone() const;
};
