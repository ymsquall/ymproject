typedef enum
{
    LAYOUT_COLOR_NONE,
    LAYOUT_COLOR_SOLID,
    LAYOUT_COLOR_GRADIENT
}LayoutBackGroundColorType;

typedef enum
{
    LAYOUT_ABSOLUTE,
    LAYOUT_LINEAR_VERTICAL,
    LAYOUT_LINEAR_HORIZONTAL,
    LAYOUT_RELATIVE
}LayoutType;

class Layout : public UIWidget
{
//public:
    Layout();
    virtual ~Layout();
    static Layout* create();
    virtual bool hitTest(const CCPoint &pt);
    void setBackGroundImage(const char* fileName,TextureResType texType = UI_TEX_TYPE_LOCAL);
    void setBackGroundImageCapInsets(const CCRect& capInsets);
    void setBackGroundColorType(LayoutBackGroundColorType type);
    void setBackGroundImageScale9Enabled(bool enabled);
    void setBackGroundColor(const ccColor3B &color);
    void setBackGroundColor(const ccColor3B &startColor, const ccColor3B &endColor);
    void setBackGroundColorOpacity(int opacity);
    void setBackGroundColorVector(const CCPoint &vector);
    virtual void setColor(const ccColor3B &color);
    virtual void setOpacity(int opacity);
    void removeBackGroundImage();
    const CCSize& getBackGroundImageTextureSize() const;
    virtual void setClippingEnabled(bool able);
    virtual bool isClippingEnabled();
    virtual const CCSize& getContentSize() const;
    virtual const char* getDescription() const;
    virtual void setLayoutType(LayoutType type);
    virtual LayoutType getLayoutType() const;
    virtual void doLayout();
    void setBackGroundImageScale9Enable(bool is);
    virtual void setClippingEnable(bool is);
};

class RectClippingNode : public CCClippingNode
{
//public:
    virtual ~RectClippingNode();
    virtual bool init();
    static RectClippingNode* create();
    void setClippingSize(const CCSize& size);
    void setClippingEnabled(bool enabled);
    virtual void visit();
    void setEnabled(bool enabled);
    bool isEnabled() const;
};
