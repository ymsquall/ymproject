class PhysicsBody : public Object
{
    static PhysicsBody* create();
    static PhysicsBody* create(float mass);
    static PhysicsBody* create(float mass, float moment);
    static PhysicsBody* createCircle(float radius, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, const Point& offset = Point::ZERO);
    static PhysicsBody* createBox(const CCSize& size, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, const CCPoint& offset = Point::ZERO);
    static PhysicsBody* createPolygon(const Point* points, int count, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, const Point& offset = Point::ZERO);
    static PhysicsBody* createEdgeSegment(const CCPoint& a, const CCPoint& b, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, float border = 1);
    static PhysicsBody* createEdgeBox(const Size& size, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, float border = 1, const Point& offset = Point::ZERO);
    static PhysicsBody* createEdgePolygon(const Point* points, int count, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, float border = 1);
    static PhysicsBody* createEdgeChain(const Point* points, int count, const PhysicsMaterial& material = PHYSICSBODY_MATERIAL_DEFAULT, float border = 1);
    virtual PhysicsShape* addShape(PhysicsShape* shape, bool addMassAndMoment = true);
    void removeShape(PhysicsShape* shape, bool reduceMassAndMoment = true);
    void removeShape(int tag, bool reduceMassAndMoment = true);
    void removeAllShapes(bool reduceMassAndMoment = true);
    inline Array* getShapes() const;
    inline PhysicsShape* getFirstShape() const;
    PhysicsShape* getShape(int tag) const;
    virtual void applyForce(const Vect& force);
    virtual void applyForce(const Vect& force, const Point& offset);
    virtual void resetForces();
    virtual void applyImpulse(const Vect& impulse);
    virtual void applyImpulse(const Vect& impulse, const Point& offset);
    virtual void applyTorque(float torque);
    virtual void setVelocity(const CCPoint& velocity);
    virtual CCPoint getVelocity();
    virtual void setAngularVelocity(float velocity);
    virtual Point getVelocityAtLocalPoint(const Point& point);
    virtual Point getVelocityAtWorldPoint(const Point& point);
    virtual float getAngularVelocity();
    virtual void setVelocityLimit(float limit);
    virtual float getVelocityLimit();
    virtual void setAngularVelocityLimit(float limit);
    virtual float getAngularVelocityLimit();
    void removeFromWorld();
    inline PhysicsWorld* getWorld() const;
    inline const std::vector<PhysicsJoint*>& getJoints() const;
    inline Node* getNode() const;
    void setCategoryBitmask(int bitmask);
    void setContactTestBitmask(int bitmask);
    void setCollisionBitmask(int bitmask);
    inline int getCategoryBitmask() const;
    inline int getContactTestBitmask() const;
    inline int getCollisionBitmask() const;
    void setGroup(int group);
    inline int getGroup() const;
    Point getPosition() const;
    float getRotation() const;
    inline bool isDynamic() const;
    void setDynamic(bool dynamic);
    void setMass(float mass);
    inline float getMass() const;
    void addMass(float mass);
    void setMoment(float moment);
    inline float getMoment(float moment) const;
    void addMoment(float moment);
    inline float getLinearDamping() const;
    inline void setLinearDamping(float damping);
    inline void setAngularDamping(float damping);
    inline bool isEnabled() const;
    void setEnable(bool enable);
    inline bool isRotationEnabled() const;
    void setRotationEnable(bool enable);
    inline bool isGravityEnabled() const;
    void setGravityEnable(bool enable);
    inline int getTag() const;
    inline void setTag(int tag);
    Point world2Local(const Point& point);
    Point local2World(const Point& point);
};
